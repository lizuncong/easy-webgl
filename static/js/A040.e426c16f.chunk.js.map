{"version":3,"file":"static/js/A040.e426c16f.chunk.js","mappings":"0JAOE,QAJA,WACE,OAAOA,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,CAACC,OAAQ,qx1BAC3B,C","sources":["dynamic/pages/纹理/为什么纹理是颠倒的.jsx"],"sourcesContent":["import React from \"react\";\n  import MarkDown from \"@/components/markdown\";\n  \n  function Index() {\n    return <MarkDown srcDoc={\"## 为什么WebGL纹理是上下颠倒的\\n\\n## 前言\\n在WebGL中绘制图片需要使用`纹理数据`。和WebGL渲染时需要裁剪空间坐标相似，渲染纹理时需要纹理坐标，而不是像素坐标。`纹理数据`的类型非常丰富，比如图像数据，JS生成的数据纹理等。本节所说的纹理上下颠倒，实际上说的是WebGL在将图像纹理数据绘制到WebGL画布时，画布的图片是上下颠倒的。本节我们就深入剖析这个问题。\\n\\n在此之前，我们先简单了解一下纹理的工作原理和纹理数据类型。\\n\\n\\n### 纹理数据类型\\nWebGL纹理数据的类型非常丰富，涵盖图像、程序生成的数据、特殊效果映射等。**WebGL纹理数据的底层通常是数组形式的**。以下是常见的纹理数据分类及其特点：\\n- **1.基础图像数据：** 通过图像文件(如PNG、JPEG等)加载的2D纹理，是最常见的类型。图像纹理的使用可以看这篇文章[WebGL图像处理](https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-image-processing.html)。图像类纹理加载后，会解码为像素值的数组，每个元素表示一个像素的颜色或透明度，再通过gl.texImage2D上传到GPU。WebGL会将数组转换为纹理的内部格式（如gl.RGBA8、gl.RGBA32F）。\\n- **2.程序生成的数据纹理：** 无需外部图像，直接通过JS生成的数据纹理。数据纹理直接使用数值数组（如Float32Array、Uint8Array）生成纹理并上传到GPU。数据纹理的使用可以看这篇文章[WebGL数据纹理](https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-data-textures.html)\\n\\n\\n### 纹理的工作原理\\n- **1.加载与创建：** 使用gl.texImage2D将`纹理数据`上传到GPU\\n- **2.纹理坐标映射：** 模型顶点通过(u,v)纹理坐标(范围[0,1]或[1,0])绑定到纹理\\n- **3.着色器采样：** 在片段着色器中，通过texture2D函数获取像素值，并计算最终颜色。\\n\\n\\ngl.texImage2D是OpenGL/WebGL中用于将2D纹理数据上传到GPU的核心函数。它的底层操作会根据传入数据的类型（图像纹理或数据纹理）有不同的处理逻辑。无论数据类型如何，gl.texImage2D的最终目标是将数据存储到GPU的纹理内存中，供着色器采样。其核心步骤包括：\\n\\n- 数据格式转换：将CPU侧的数组或图像数据转换为GPU可识别的内部格式（如 GL_RGBA8、GL_RGBA32F）。\\n- 内存分配：在GPU上为纹理分配存储空间。\\n- 数据拷贝：将CPU数据复制到GPU内存。\\n- MIPMAP生成（可选）：根据参数自动生成多级渐远纹理（MIPMAP）。\\n\\n> 因此，不管是图像纹理数据还是数据纹理，最终在GPU纹理内存中都是类数组的形式存储\\n\\n\\n\\n### 纹理坐标\\n纹理是通过“纹理坐标”来引用的，纹理坐标0.0到1.0对应纹理从左到右，0.0到1.0对应第一个像素所在行到最后一行。上下在纹理坐标空间中是没有意义的，主要是依据传递给WebGL的纹理数据，纹理数据的开头对应纹理坐标(0,0)，结尾对应纹理坐标(1,1)\\n\\n​纹理坐标是将纹理映射到三维物体表面的关键机制。纹理坐标定义了每个三维顶点在纹理图像中的对应位置，告诉 WebGL：“这个顶点应该显示纹理图像的哪个部分”\\n\\n下面通过例子来演示不同类型纹理数据，如何通过纹理坐标引用。我们将在画布(0, 0)到(0.5, 0.5)处使用纹理绘制矩形。\\n\\n![image](../../easy-webgl/coor_01.png)\\n\\n对应的矩形的顶点坐标为：\\n```js\\nconst rectX = 0.0, rectY = 0.5, rectWidth = 0.5, rectHeight = 0.5\\nlet verticesInfo = [\\n    rectX, rectY,\\n    rectX + rectWidth, rectY,\\n    rectX, rectY - rectHeight,\\n    rectX, rectY - rectHeight,\\n    rectX + rectWidth, rectY,\\n    rectX + rectWidth, rectY - rectHeight,\\n]\\n```\\n\\n\\n#### 数据纹理\\n我们使用下面 `4 x 4` 像素的数据纹理填充上面的矩形\\n```js\\n  // 用 4x4 的像素填充纹理\\n  const level = 0;\\n  const internalFormat = gl.RGBA;\\n  const width = 4;\\n  const height = 4;\\n  const border = 0;\\n  const format = gl.RGBA;\\n  const type = gl.UNSIGNED_BYTE;\\n  const data = new Uint8Array([\\n    255, 0, 0, 255, // 红\\n    0, 255, 0, 255, // 绿\\n    0, 0, 255, 255, // 蓝\\n    255, 255, 0, 255, // 黄\\n\\n    255, 0, 255, 255, // 品红色\\n    0, 255, 255, 255, // 青色\\n    105, 255, 105, 255,   // 青柠绿\\n    0, 0, 0, 255, // 黑色\\n\\n\\n    255, 165, 0, 255,    // 橙色\\n    75, 32, 132, 255,    // 深紫色\\n    255, 218, 0, 255,    // 金色\\n    124, 252, 0,  255,   // 荧光绿\\n\\n    255, 20, 133, 255,      // 珊瑚色\\n    255, 182, 193, 255,   // 淡粉红\\n    138, 43, 238, 255,    // 魔法蓝\\n    255, 255, 255, 255,     // 白色\\n  ]);\\n  gl.texImage2D(\\n    gl.TEXTURE_2D,\\n    level,\\n    internalFormat,\\n    width,\\n    height,\\n    border,\\n    format,\\n    type,\\n    data\\n  );\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\\n\\n```\\n\\n如果用纹理坐标表示数据纹理，那么数据纹理的第一个颜色(即红色)像素位于左下角，最后一个颜色(即白色)像素位于右上角，如下图所示：\\n\\n![image](../../easy-webgl/coor_02.jpg)\\n\\n现在我们用这个数据纹理填充上面的矩形，我们给WebGL提供的纹理坐标如下：\\n```js\\n  const x = 0, y = 0, textWidth = 1.0, textHeight = 1.0;\\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\\n    x, y + textHeight,\\n    x + textWidth, y + textHeight,\\n    x, y,\\n    x, y,\\n    x + textWidth, y + textHeight,\\n    x + textWidth, y\\n  ]), gl.STATIC_DRAW);\\n```\\n对应关系见下图绿色数字，图中绿色数字表示传输给WebGL的顶点坐标和纹理坐标的顺序。\\n\\n![image](../../easy-webgl/coor_06.jpg)\\n\\n绘制结果如下：\\n\\n![image](../../easy-webgl/coor_03.jpg)\\n\\n如果我们只需要用中间四个像素填充矩形，即下图红框中四个像素\\n\\n![image](../../easy-webgl/coor_04.jpg)\\n\\n只需要修改上面的代码\\n\\n```js\\nconst x = 0.25, y = 0.25, textWidth = 0.5, textHeight = 0.5;\\n// const x = 0, y = 0, textWidth = 1.0, textHeight = 1.0;\\n```\\n\\n绘制结果如下\\n\\n![image](../../easy-webgl/coor_05.jpg)\\n\\n\\n完整代码如下：\\n```js\\nconst main = () => {\\n  const canvas = document.getElementById('webgl')\\n  const gl = canvas.getContext('webgl2')\\n  const vertexShaderSource1 = `\\n    attribute vec2 a_texCoord;\\n    attribute vec2 a_position;\\n    varying vec2 v_texCoord;\\n    void main(){\\n        gl_PointSize = 10.0;\\n        gl_Position = vec4(a_position, 0.0, 1.0);\\n        // 将纹理坐标传给片段着色器\\n        // GPU会在点之间进行插值\\n        v_texCoord = a_texCoord;\\n    }\\n  `\\n  const fragmentShaderSource1 = `\\n    precision mediump float;\\n    uniform sampler2D u_image;\\n    // 从顶点着色器传入的纹理坐标\\n    varying vec2 v_texCoord;\\n    void main(){\\n      // 在纹理上寻找对应颜色值\\n      gl_FragColor = texture2D(u_image, v_texCoord);\\n    }\\n  `\\n  const program1 = initShaders(gl, vertexShaderSource1, fragmentShaderSource1)\\n  const positionLocation1 = gl.getAttribLocation(program1, 'a_position')\\n  const texCoordLocation = gl.getAttribLocation(program1, \\\"a_texCoord\\\");\\n\\n  // 给矩形提供纹理坐标\\n  const texCoordBuffer = gl.createBuffer();\\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\\n  const x = 0.25, y = 0.25, textWidth = 0.5, textHeight = 0.5;\\n  // const x = 0, y = 0, textWidth = 1.0, textHeight = 1.0;\\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\\n    x, y + textHeight,\\n    x + textWidth, y + textHeight,\\n    x, y,\\n    x, y,\\n    x + textWidth, y + textHeight,\\n    x + textWidth, y\\n  ]), gl.STATIC_DRAW);\\n  gl.enableVertexAttribArray(texCoordLocation);\\n  gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\\n\\n  const rectX = 0.0, rectY = 0.5, rectWidth = 0.5, rectHeight = 0.5\\n  let verticesInfo = [\\n    rectX, rectY,\\n    rectX + rectWidth, rectY,\\n    rectX, rectY - rectHeight,\\n    rectX, rectY - rectHeight,\\n    rectX + rectWidth, rectY,\\n    rectX + rectWidth, rectY - rectHeight,\\n  ]\\n \\n  verticesInfo = new Float32Array(verticesInfo);\\n\\n  const vertexBuffer = gl.createBuffer();\\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\\n  gl.bufferData(gl.ARRAY_BUFFER, verticesInfo, gl.STATIC_DRAW);\\n\\n  gl.vertexAttribPointer(positionLocation1, 2, gl.FLOAT, false, 8, 0);\\n\\n  gl.enableVertexAttribArray(positionLocation1);\\n\\n  // 创建纹理\\n  var texture = gl.createTexture();\\n  gl.bindTexture(gl.TEXTURE_2D, texture);\\n\\n  // 用 4x4 的像素填充纹理\\n  const level = 0;\\n  const internalFormat = gl.RGBA;\\n  const width = 4;\\n  const height = 4;\\n  const border = 0;\\n  const format = gl.RGBA;\\n  const type = gl.UNSIGNED_BYTE;\\n  const data = new Uint8Array([\\n    255, 0, 0, 255, // 红\\n    0, 255, 0, 255, // 绿\\n    0, 0, 255, 255, // 蓝\\n    255, 255, 0, 255, // 黄\\n\\n    255, 0, 255, 255, // 品红色\\n    0, 255, 255, 255, // 青色\\n    105, 255, 105, 255,   // 青柠绿\\n    0, 0, 0, 255, // 黑色\\n\\n\\n    255, 165, 0, 255,    // 橙色\\n    75, 32, 132, 255,    // 深紫色\\n    255, 218, 0, 255,    // 金色\\n    124, 252, 0,  255,   // 荧光绿\\n\\n    255, 20, 133, 255,      // 珊瑚色\\n    255, 182, 193, 255,   // 淡粉红\\n    138, 43, 238, 255,    // 魔法蓝\\n    255, 255, 255, 255,     // 白色\\n  ]);\\n  gl.texImage2D(\\n    gl.TEXTURE_2D,\\n    level,\\n    internalFormat,\\n    width,\\n    height,\\n    border,\\n    format,\\n    type,\\n    data\\n  );\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\\n\\n\\n  gl.clearColor(0, 0, 0, 0)\\n\\n  gl.clear(gl.COLOR_BUFFER_BIT);\\n\\n  gl.useProgram(program1)\\n\\n\\n  gl.drawArrays(gl.TRIANGLES, 0, 6)\\n\\n}\\n\\nmain();\\n```\\n\\n至此，我们通过demo演示了数据纹理是如何通过纹理坐标填充三维物体表面的。\\n\\n#### 图像数据纹理\\n这次我们使用下面的`color.png`图片填充矩形，这是一张4 * 4像素的图片，每个像素的颜色使用数据纹理中的数据生成，可以看到和上面的数据纹理的颜色和顺序一致。\\n\\n![image](../../easy-webgl/color.png)\\n\\n\\n理论上来说，如果图片纹理的原点在左下角，那么红色像素将位于矩形的左下角，白色像素将位于矩形的右上角\\n\\n![image](../../easy-webgl/coor_08.jpg)\\n\\n我们复用数据纹理的demo代码，包括纹理坐标等数据。如下所示：\\n```js\\nconst main = (image) => {\\n  const canvas = document.getElementById('webgl')\\n  const gl = canvas.getContext('webgl2')\\n  const vertexShaderSource1 = `\\n    attribute vec2 a_texCoord;\\n    attribute vec2 a_position;\\n    varying vec2 v_texCoord;\\n    void main(){\\n        gl_PointSize = 10.0;\\n        gl_Position = vec4(a_position, 0.0, 1.0);\\n        // 将纹理坐标传给片段着色器\\n        // GPU会在点之间进行插值\\n        v_texCoord = a_texCoord;\\n    }\\n  `\\n  const fragmentShaderSource1 = `\\n    precision mediump float;\\n    uniform sampler2D u_image;\\n    // 从顶点着色器传入的纹理坐标\\n    varying vec2 v_texCoord;\\n    void main(){\\n      // 在纹理上寻找对应颜色值\\n      gl_FragColor = texture2D(u_image, v_texCoord);\\n    }\\n  `\\n  const program1 = initShaders(gl, vertexShaderSource1, fragmentShaderSource1)\\n  const positionLocation1 = gl.getAttribLocation(program1, 'a_position')\\n  const texCoordLocation = gl.getAttribLocation(program1, \\\"a_texCoord\\\");\\n\\n  // 给矩形提供纹理坐标\\n  const texCoordBuffer = gl.createBuffer();\\n  gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\\n  // const x = 0.25, y = 0.25, textWidth = 0.5, textHeight = 0.5;\\n  const x = 0, y = 0, textWidth = 1.0, textHeight = 1.0;\\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\\n    x, y + textHeight,\\n    x + textWidth, y + textHeight,\\n    x, y,\\n    x, y,\\n    x + textWidth, y + textHeight,\\n    x + textWidth, y\\n  ]), gl.STATIC_DRAW);\\n  gl.enableVertexAttribArray(texCoordLocation);\\n  gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\\n\\n  const rectX = 0.0, rectY = 0.5, rectWidth = 0.5, rectHeight = 0.5\\n  let verticesInfo = [\\n    rectX, rectY,\\n    rectX + rectWidth, rectY,\\n    rectX, rectY - rectHeight,\\n    rectX, rectY - rectHeight,\\n    rectX + rectWidth, rectY,\\n    rectX + rectWidth, rectY - rectHeight,\\n  ]\\n \\n  verticesInfo = new Float32Array(verticesInfo);\\n\\n  const vertexBuffer = gl.createBuffer();\\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\\n  gl.bufferData(gl.ARRAY_BUFFER, verticesInfo, gl.STATIC_DRAW);\\n\\n  gl.vertexAttribPointer(positionLocation1, 2, gl.FLOAT, false, 8, 0);\\n\\n  gl.enableVertexAttribArray(positionLocation1);\\n\\n  // 创建纹理\\n  var texture = gl.createTexture();\\n  gl.bindTexture(gl.TEXTURE_2D, texture);\\n   // 将图像上传到纹理\\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\\n\\n\\n  gl.clearColor(0, 0, 0, 0)\\n\\n  gl.clear(gl.COLOR_BUFFER_BIT);\\n\\n  gl.useProgram(program1)\\n\\n\\n  gl.drawArrays(gl.TRIANGLES, 0, 6)\\n\\n}\\n\\n// // 图片URL\\nconst imageUrl = \\\"./color.png\\\"\\n\\nconst image = new Image();\\nimage.src = imageUrl  \\nimage.onload = function () {\\n  main(image);\\n}\\n```\\n\\n绘制结果如下，可以发现绘制的结果是上下颠倒的！\\n\\n![image](../../easy-webgl/coor_09.jpg)\\n\\n这次的代码只是将数据纹理更换成图片纹理，即\\n```js\\n    // 用 4x4 的像素填充纹理\\n    const level = 0;\\n    const internalFormat = gl.RGBA;\\n    const width = 4;\\n    const height = 4;\\n    const border = 0;\\n    const format = gl.RGBA;\\n    const type = gl.UNSIGNED_BYTE;\\n    const data = new Uint8Array([\\n      255, 0, 0, 255, // 红\\n      0, 255, 0, 255, // 绿\\n      0, 0, 255, 255, // 蓝\\n      255, 255, 0, 255, // 黄\\n  \\n      255, 0, 255, 255, // 品红色\\n      0, 255, 255, 255, // 青色\\n      105, 255, 105, 255,   // 青柠绿\\n      0, 0, 0, 255, // 黑色\\n  \\n  \\n      255, 165, 0, 255,    // 橙色\\n      75, 32, 132, 255,    // 深紫色\\n      255, 218, 0, 255,    // 金色\\n      124, 252, 0,  255,   // 荧光绿\\n  \\n      255, 20, 133, 255,      // 珊瑚色\\n      255, 182, 193, 255,   // 淡粉红\\n      138, 43, 238, 255,    // 魔法蓝\\n      255, 255, 255, 255,     // 白色\\n    ]);\\n    gl.texImage2D(\\n      gl.TEXTURE_2D,\\n      level,\\n      internalFormat,\\n      width,\\n      height,\\n      border,\\n      format,\\n      type,\\n      data\\n    );\\n```\\n\\n替换成：\\n\\n```js\\n// 将图像上传到纹理\\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\\n```\\n\\n我们传递的纹理坐标和顶点坐标都一样，但图片纹理最终的绘制结果却是上下颠倒的，这也是本篇文章想探讨的。\\n\\n### 为什么图片纹理绘制结果是上下颠倒的\\n在回答这个问题之前，我们先通过代码读取color.png这张图片的rgba值。\\n```js\\nconst img = new Image();\\nimg.src =  \\\"./color.png\\\";\\n\\nimg.onload = () => {\\n  const canvas = document.createElement('canvas');\\n  const ctx = canvas.getContext('2d');\\n  canvas.width = img.width;\\n  canvas.height = img.height;\\n  ctx.drawImage(img, 0, 0);\\n\\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\\n  const data = imageData.data;\\n\\n  console.log('rgba：', data)\\n\\n};\\n```\\n\\n可以看到，color.png中第一个颜色块（即珊瑚色）位于像素数组的开头\\n\\n![image](../../easy-webgl/coor_10.jpg)\\n\\n最后一个颜色块（即黄色）位于像素数组的结尾\\n\\n![image](../../easy-webgl/coor_11.jpg)\\n\\n由此可见，在浏览器中，图片转成纹理像素数据时，浏览器底层是先从图片的左上角开始复制第一个像素点，直到图片的右下角。\\n\\n\\n回到我们的代码中，我们使用gl.texImage2D将`纹理数据`上传到GPU。WebGL的texImage2D函数是对OpenGL的glTexImage2D函数的轻量级包装器。​在OpenGL中，glTexImage2D函数并不接受HTMLImageElement类型的源对象，它仅接收一个 const void* data类型的数据指针。该函数期望传入的像素数组中的数据以`​自下而上`的顺序存储：​第一个元素对应纹理图像的左下角；最后一个元素则对应纹理图像的右上角。\\n\\n然而，[​WebGL规范](https://registry.khronos.org/webgl/specs/latest/1.0/#TEXIMAGE2D_HTML)对 texImage2D 函数的定义却指出：第一个元素对应纹理图像的左上角。\\n\\n![image](../../easy-webgl/coor_12.jpg)\\n\\n这意味着，尽管OpenGL期望像素数据`以自下而上`的顺序排列，但浏览器在处理 `<img>` 元素时，仍然会以自上而下的顺序复制像素！\\n\\n这就导致，如果我们在WebGL中，在处理图片类型的纹理时，如果还是按照纹理坐标原点在左下角传输纹理坐标，那么最终绘制出来的图片将是上下颠倒的。如果希望修复这个问题，有两种方案：\\n\\n- 1.使用`gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);`翻转Y轴\\n- 2.将图片左上角作为原点传输纹理坐标\\n\\n我们采用第2种方案修复这个问题，即将左上角当作原点传输坐标：\\n\\n![image](../../easy-webgl/coor_13.jpg)\\n\\n对应的纹理坐标如下：\\n\\n```js\\nconst x = 0, y = 0, textWidth = 1.0, textHeight = 1.0;\\ngl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\\n  x, y,\\n  x + textWidth, y,\\n  x, y + textHeight,\\n  x, y + textHeight,\\n  x + textWidth, y,\\n  x + textWidth, y + textHeight,\\n]), gl.STATIC_DRAW);\\n```\\n\\n可以发现绘制的结果是我们所期望的。\\n\\n\\n### 结论\\n在OpenGL中，纹理坐标的原点在左下角，glTexImage2D函数期望传入的像素数组中的数据以自下而上的顺序存储。而WebGL的texImage2D函数只是基于glTexImage2D的简单封装，因此理论上也是期望传入的像素数组中的数据以自下而上的顺序存储。这就意味着，在WebGL中，纹理坐标的原点也是在左下角。\\n\\n但是图片类型的纹理数据比较特殊，由于在浏览器设计之初，复制图片像素数据都是从左上角开始，这就导致传入给WebGL的texImage2D函数的像素数据是从上到下存储的。就会导致绘制的结果是上下颠倒的。\\n\\n因此，在WebGL中，关于纹理坐标原点需要分两种场景：\\n- 图片类型的纹理数据，纹理坐标原点在左上角\\n- 其他类型的纹理数据，纹理坐标原点在左下角\\n\\n实际上，上或者下在纹理坐标空间中是没有意义的，毕竟底层的glTexImage2D最终接收的是像素数组，纹理坐标(0,0)对应数据的开头，(1,1)对应数据的结尾\\n\\n\\n### 参考\\n- [why-is-my-webgl-texture-upside-down/](https://jameshfisher.com/2020/10/22/why-is-my-webgl-texture-upside-down/)\\n\\n- [webgl规范](https://registry.khronos.org/webgl/specs/latest/1.0/#TEXIMAGE2D_HTML)\\n\\n- [WebGL三维纹理](https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-3d-textures.html)\"} />;\n  }\n  \n  export default Index;"],"names":["_jsx","MarkDown","srcDoc"],"sourceRoot":""}