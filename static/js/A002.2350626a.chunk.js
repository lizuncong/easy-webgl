"use strict";(self.webpackChunkWebGL=self.webpackChunkWebGL||[]).push([[30],{3860:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});t(5043);var o=t(8044),r=t(579);const i=function(){return(0,r.jsx)(o.A,{srcDoc:"## \u524d\u8a00\n\n\u672c\u7bc7\u6587\u7ae0\u5bf9\u5e94\u7684\u6398\u91d1\u5730\u5740\uff1a[https://juejin.cn/post/7443087089444536370](https://juejin.cn/post/7443087089444536370)\n\n\u5728webgl\u4e2d\uff0c\u6211\u4eec\u8c03\u7528`WebGLRenderingContext.vertexAttribPointer()`\u65b9\u6cd5\u544a\u8bc9\u663e\u5361\u4ece\u5f53\u524d\u7ed1\u5b9a\u7684\u7f13\u51b2\u533a\uff08bindBuffer() \u6307\u5b9a\u7684\u7f13\u51b2\u533a\uff09\u4e2d\u8bfb\u53d6\u9876\u70b9\u6570\u636e\u3002\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u5185\u5bb9\uff1a\n\n- \u8be6\u7ec6\u89e3\u6790vertexAttribPointer\u65b9\u6cd5\u53ca\u5404\u4e2a\u53c2\u6570\u7684\u4f5c\u7528\uff0c\u770b\u770b\u5c5e\u6027\u5982\u4f55\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n- \u5982\u4f55\u4f7f\u7528\u540c\u4e00\u4e2a\u7f13\u51b2\u540c\u65f6\u5b58\u50a8\u9876\u70b9\u7684\u5750\u6807\u548c\u989c\u8272\u7b49\u4fe1\u606f\n- \u5982\u4f55\u4f7f\u7528\u540c\u4e00\u4e2a\u7f13\u51b2\u540c\u65f6\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\n\n\u8bed\u6cd5\uff1a\n\n```js\nvertexAttribPointer(index, size, type, normalized, stride, offset)\n```\n\n\u53ef\u4ee5\u7528javascript\u4f2a\u4ee3\u7801\u8868\u793a\u5982\u4e0b\uff1a\n\n```js\n// \u4f2a\u4ee3\u7801\ngl.vertexAttribPointer = function(location, size, type, normalize, stride, offset) {\n  const attrib = gl.vertexArray.attributes[location];\n  attrib.size = size;\n  attrib.type = type;\n  attrib.normalize = normalize;\n  attrib.stride = stride ? stride : sizeof(type) * size;\n  attrib.offset = offset;\n  attrib.buffer = gl.arrayBuffer;  // !!!! <-----\n};\n```\n\n![image](../../easy-webgl/ver_01.webp)\n\n\u4e0a\u56fe\u7684\u9876\u70b9\u7740\u8272\u5668\u4e2d\uff0cposition\u5c5e\u6027\u7684type\u662fvec4\uff0c\u4f46\u5c5e\u6027\u6570\u7ec4\u4e2d\uff0c\u5b83\u7684size\u8bbe\u7f6e\u62103\uff0c\u4e3a\u4ec0\u4e48\uff1f\u672c\u8282\u6587\u7ae0\u4f1a\u89e3\u7b54\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u672c\u7bc7\u6587\u7ae0\u4f1a\u8be6\u7ec6\u89e3\u8bfbvertexAttribPointer\u65b9\u6cd5\u7684\u5404\u4e2a\u53c2\u6570\u5b57\u6bb5\u7684\u4f5c\u7528\u3002\n\n### \u5c5e\u6027\u7d22\u5f15(Attribute index)\n\nvertexAttribPointer\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u5c5e\u6027\u7684\u7d22\u5f15\uff0c\u5373\u5c5e\u6027\u5728\u9876\u70b9\u6570\u7ec4(vertex array)\u4e2d\u7684\u7d22\u5f15\u3002\u9876\u70b9\u6570\u7ec4\u80fd\u652f\u6301\u591a\u5c11\u4e2a\u9876\u70b9\u53d6\u51b3\u4e8e\u663e\u5361\u3002\u53ef\u4ee5\u8c03\u7528`gl.getParameter(gl.MAX_VERTEX_ATTRIBS)`\u83b7\u53d6\u9876\u70b9\u6570\u7ec4\u652f\u6301\u7684\u9876\u70b9\u6570\u91cf\u3002\u6bcf\u4e2a\u5c5e\u6027\u90fd\u5fc5\u987b\u6307\u5b9a\u7d22\u5f15\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u6307\u5b9a\u7d22\u5f15\uff1a\n\n#### 1.\u624b\u52a8\u7ed1\u5b9a\u9876\u70b9\u7d22\u5f15\u3002\n\n\u5728\u8c03\u7528`gl.linkProgram()`\u524d\uff0c\u8c03\u7528`bindAttribLocation`\u7ed1\u5b9a\u9876\u70b9\u7d22\u5f15\u3002\u6bd4\u5982\uff1a\n\n```js\nconst positionLocation = 6; // \u5fc5\u987b\u5c0f\u4e8egl.getParameter(gl.MAX_VERTEX_ATTRIBS)\ngl.bindAttribLocation(program, positionLocation, 'position');\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u7740\u8272\u7a0b\u5e8fprogram\u4e2d\u7684position\u5c5e\u6027\u7ed1\u5b9a\u5728\u9876\u70b9\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a6\u7684\u4f4d\u7f6e\u4e0a\u3002\u540e\u7eed\u53ef\u4ee5\u76f4\u63a5\u5c066\u4f20\u9012\u7ed9`gl.vertexAttribPointer()`\u3002\n\n#### 2.\u663e\u5361\u81ea\u52a8\u5206\u914d\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728\u7f16\u8bd1\u9876\u70b9\u7740\u8272\u5668\u65f6\uff0c\u663e\u5361\u4f1a\u81ea\u52a8\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u5206\u914d\u7d22\u5f15\u4f4d\u7f6e\u3002\u6bcf\u4e2a\u5c5e\u6027\u7684\u7d22\u5f15\u53d6\u51b3\u4e8e\u663e\u5361\u7684\u5206\u914d\uff0c\u4f1a\u6709\u8f83\u5927\u5dee\u5f02\u3002\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u5148\u8c03\u7528`gl.getAttribLocation()`\u83b7\u53d6\u5c5e\u6027\u7684\u7d22\u5f15\uff0c\u7136\u540e\u518d\u8d4b\u503c\u7ed9`gl.vertexAttribPointer()`\n\n### SIZE\n\nvertexAttribPointer\u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c31\u662fsize\u3002size\u7528\u6765\u6307\u5b9a\u6bcf\u4e2a\u9876\u70b9\u5c5e\u6027\u7684\u7ec4\u6210\u6570\u91cf\uff0c\u5fc5\u987b\u662f 1\uff0c2\uff0c3\u62164\u3002\u5b9e\u9645\u4e0a\u8fd9\u5c31\u662f\u6211\u4eec\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u58f0\u660e\u5c5e\u6027\u65f6\u7684`vec[1234]`\u7684\u5927\u5c0f\u3002\u6240\u4ee5`size`\u6700\u5927\u4e3a4\u3002\n\n\u5728\u7ee7\u7eed\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u56de\u987e\u4e00\u4e0b\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d[\u3010WebGL\u3011\u6df1\u5165\u7406\u89e3\u5c5e\u6027\u548c\u7f13\u51b2](https://juejin.cn/post/7440065311319326747#heading-3)\u8bb2\u7684\u5c5e\u6027\u9ed8\u8ba4\u503c\u5bf9\u8c61\u3002\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u9ed8\u8ba4\u503c\uff0c\u5b58\u5728`gl.attributeValues`\u6570\u7ec4\u4e2d\u3002\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u4e3a`vec4(0.0, 0.0, 0.0, 1.0)`\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7`gl.vertexAttrib[1234]f[v]()`\u4fee\u6539\u9ed8\u8ba4\u503c\u3002\u6216\u8005\u901a\u8fc7gl.enableVertexAttribArray()\u544a\u8bc9webgl\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n\n\u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\uff0c\u6211\u4eec\u5728\u9876\u70b9\u7740\u8272\u5668\u4e2d\u4f7f\u7528`vec4`\u544a\u8bc9webgl\uff0c`a_position`\u671f\u671b\u7684\u662f4\u4e2a\u6570\u5b57\u3002\n\n```js\nconst vertexShaderSource1 = `\n    attribute vec4 a_position;\n    void main(){\n        gl_PointSize = 10.0;\n        gl_Position = vec4(a_position);\n    }\n`\n```\n\n\u5f53\u6211\u4eec\u8c03\u7528gl.vertexAttribPointer\u5e76\u5c06size\u8bbe\u4e3a2\u65f6\uff0c**webgl\u4f1a\u5148\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u4e24\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u7b2c\u4e09\u548c\u7b2c\u56db\u4e2a\u6570\u5b57\u4f1a\u4ece\u9ed8\u8ba4\u503cvec4(0.0, 0.0, 0.0, 1.0)\u4e2d\u8bfb\u53d6**\u3002\n\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u9876\u70b9\u7740\u8272\u5668\u8fd0\u884c\u4e09\u6b21\uff0c\u5c5e\u6027a\\_position\u6700\u7ec8\u7684\u503c\u4e3a\uff1a\n\n*   vec(-0.5, 0.0, 0.0, 1.0)\n*   vec(0.5, 0.0, 0.0, 1.0)\n*   vec(0.0, 0.0, 0.0, 1.0)\n\n```js\n let positions = [\n    -0.5, 0.0,\n    0.5, 0.0,\n    0.0, 0.0\n  ]\n gl.vertexAttribPointer(\n    positionLocation1,\n    2, // size\n    gl.FLOAT, // type, buffer\u7684\u6570\u636e\u7c7b\u578b\n    false,\n    0, // \u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f\u6240\u5360\u7684bytes\n    0\n  )\n```\n\n\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u8c03\u7528`gl.vertexAttrib3f(positionLocation1, 0.0, 0.5, 0.6);`\u4fee\u6539\u4e86\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\uff0cwebgl\u5728\u8bfb\u53d6\u7f13\u51b2\u65f6\uff0c\u9ed8\u8ba4\u503c\u8fd8\u662f\u6309\u7167vec4(0.0, 0.0, 0.0, 1.0)\u8bfb\u53d6\u3002\u6bd4\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a\n\n```js\nconst main = () => {\n  const canvas = document.getElementById('webgl')\n  const gl = canvas.getContext('webgl2')\n  const vertexShaderSource1 = `\n    attribute vec4 a_position;\n    void main(){\n        gl_PointSize = 10.0;\n        gl_Position = vec4(a_position);\n    }\n  `\n  const fragmentShaderSource1 = `\n    precision mediump float;\n    void main(){\n        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n  `\n  const program1 = initShaders(gl, vertexShaderSource1, fragmentShaderSource1)\n\n  const positionLocation1 = gl.getAttribLocation(program1, 'a_position')\n  gl.vertexAttrib3f(positionLocation1, 0.0, 0.5, 0.6);\n\n  let positions = [\n    -0.5,\n    0.5,\n    0.0, \n  ]\n  positions = new Float32Array(positions)\n\n\n\n  const positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW)\n\n  // \u8bbe\u7f6e\u5c5e\u6027positionLocation1\u7684\u4e00\u7cfb\u5217\u72b6\u6001\uff0c\u544a\u8bc9\u5b83\u5e94\u8be5\u600e\u4e48\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u6570\u636e\n  // \u5b9a\u4e49\u70b9\u7684\u4fe1\u606f\n  gl.vertexAttribPointer(\n    positionLocation1,\n    1, \n    gl.FLOAT, // type, buffer\u7684\u6570\u636e\u7c7b\u578b\n    false,\n    0, // \u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f\u6240\u5360\u7684bytes\n    0\n  );\n \n\n  gl.enableVertexAttribArray(positionLocation1);\n\n  gl.clearColor(0, 0, 0, 0)\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  gl.useProgram(program1)\n  // \u544a\u8bc9webgl\u7ed8\u52363\u4e2a\u70b9\n  gl.drawArrays(gl.POINTS, 0, 3)\n\n}\n\nmain();\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5148\u8c03\u7528`gl.vertexAttrib3f(positionLocation1, 0.0, 0.5, 0.6);`\u4fee\u6539\u4e86\u5c5e\u6027a\\_position\u7684\u9ed8\u8ba4\u503c\u3002a\\_position\u7684\u9ed8\u8ba4\u503c\u53d8\u6210vec4(0.0, 0.5, 0.6,1.0)\u3002\n\n\u7136\u540e\u6211\u4eec\u901a\u8fc7\u7f13\u51b2\u4f20\u9012\u4e863\u4e2a\u6570\u5b57\uff0c\u5e76\u8c03\u7528`gl.vertexAttribPointer`\u544a\u8bc9webgl\u600e\u4e48\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06size\u8bbe\u4e3a1\uff0c\u56e0\u6b64\u9876\u70b9\u7740\u8272\u5668\u8fd0\u884c\u4e09\u6b21\uff0ca\\_position\u7684\u6700\u7ec8\u53d6\u503c\uff1a\n\n*   vec(-0.5, 0.0, 0.0, 1.0)\n*   vec(0.5, 0.0, 0.0, 1.0)\n*   vec(0.0, 0.0, 0.0, 1.0)\n\n\u800c\u4e0d\u662f\n\n*   vec(-0.5, 0.5, 0.6, 1.0)\n*   vec(0.5, 0.5, 0.6, 1.0)\n*   vec(0.0, 0.5, 0.6, 1.0)\n\n\u6548\u679c\u5982\u4e0b\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u4e09\u4e2a\u70b9\u7684y\u8f74\u65b9\u5411\u5747\u4e3a0.0\uff0c\u800c\u4e0d\u662f0.5\n\n![image](../../easy-webgl/ver_02.webp)\n\n> MDN\u5173\u4e8esize\u4ece[\u7f13\u51b2\u548c\u9ed8\u8ba4\u503c\u53d6\u503c](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/vertexAttribPointer#default_attribute_values)\u7684\u63cf\u8ff0\u5e94\u8be5\u662f\u4e2a\u9677\u9631\uff0c\u4e0a\u9762\u7684\u5b9e\u8df5\u7ed3\u679c\u8868\u660e\u5373\u4f7f\u6539\u53d8\u4e86\u9ed8\u8ba4\u503c\uff0cwebgl\u8bfb\u53d6\u9ed8\u8ba4\u503c\u65f6\u8fd8\u662f\u4f1a\u6309\u7167vec4(0.0, 0.0, 0.0, 1.0)\u8bfb\u53d6\n\n### TYPE\n\nvertexAttribPointer\u65b9\u6cd5\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u5c31\u662ftype\u3002type\u7528\u6765\u6307\u5b9a\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f\u4e0b\u9762\u7684\u7c7b\u578b\uff1a\n\n*   gl.BYTE\uff1a\u6709\u7b26\u53f7\u76848\u4f4d\u6574\u6570\uff0c\u8303\u56f4\\[-128, 127]\u3002\u4e00\u4e2a\u6570\u5b57\u53601\u4e2a\u5b57\u8282\u3002\u53ef\u4ee5\u4f7f\u7528new Int8Array\u521b\u5efa\n*   gl.SHORT\uff1a\u6709\u7b26\u53f7\u768416\u4f4d\u6574\u6570\uff0c\u8303\u56f4\\[-32768, 32767]\u3002\u4e00\u4e2a\u6570\u5b57\u53602\u4e2a\u5b57\u8282\u3002\u53ef\u4ee5\u4f7f\u7528new Int16Array\u521b\u5efa\n*   gl.UNSIGNED\\_BYTE\uff1a\u65e0\u7b26\u53f7\u76848\u4f4d\u6574\u6570\uff0c\u8303\u56f4 \\[0, 255]\u3002\u4e00\u4e2a\u6570\u5b57\u53601\u4e2a\u5b57\u8282\u3002\u53ef\u4ee5\u4f7f\u7528new Uint8Array\u521b\u5efa\n*   gl.UNSIGNED\\_SHORT\uff1a\u65e0\u7b26\u53f7\u768416\u4f4d\u6574\u6570\uff0c\u8303\u56f4\\[0, 65535]\u3002\u4e00\u4e2a\u6570\u5b57\u53602\u4e2a\u5b57\u8282\u3002\u53ef\u4ee5\u4f7f\u7528new Uint16Array\u521b\u5efa\n*   gl.FLOAT\uff1a32\u4f4dIEEE\u6807\u51c6\u7684\u6d6e\u70b9\u3002\u4e00\u4e2a\u6570\u5b57\u53604\u4e2a\u5b57\u8282\u3002\u53ef\u4ee5\u4f7f\u7528new Float32Array\u521b\u5efa\n*   \u4f7f\u7528 WebGL2 \u7248\u672c\u7684\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u503c\uff1agl.HALF\\_FLOAT\n\n### NORMALIZED(\u5f52\u4e00\u5316)\n\nvertexAttribPointer\u65b9\u6cd5\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u5c31\u662fnormalized\u3002\u5728WebGL\u4e2d\uff0c\u5f52\u4e00\u5316\u662f\u6307\u5c06\u6570\u636e\u6309\u6bd4\u4f8b\u7f29\u653e\u5230\u4e00\u4e2a\u7279\u5b9a\u8303\u56f4\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u662f \\[0, 1] \u6216 \\[-1, 1]\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u5728\u56fe\u5f62\u7f16\u7a0b\u4e2d\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u63a7\u5236\u989c\u8272\u3001\u7eb9\u7406\u5750\u6807\u548c\u6cd5\u5411\u91cf\u7b49\u6570\u636e\uff0c\u4ece\u800c\u5b9e\u73b0\u66f4\u52a0\u7cbe\u786e\u548c\u9ad8\u6548\u7684\u6e32\u67d3\u3002`\u5f52\u4e00\u5316`\u9002\u7528\u4e8e\u6240\u6709\u975e\u6d6e\u70b9\u578b\u6570\u636e\u3002\n\n\u5982\u679c\u4f20\u9012`false`\u5c31**\u89e3\u8bfb\u539f\u6570\u636e\u7c7b\u578b**\u3002 BYTE\u7c7b\u578b\u7684\u8303\u56f4\u662f\u4ece-128\u5230127\uff0cUNSIGNED\\_BYTE\u7c7b\u578b\u7684\u8303\u56f4\u662f\u4ece0\u5230255\uff0cSHORT\u7c7b\u578b\u7684\u8303\u56f4\u662f\u4ece-32768\u523032767\uff0c\u7b49\u7b49...\n\n\u5982\u679c\u8bbe\u4e3a`true`\uff0cBYTE\u6570\u636e\u7684\u503c(-128 to 127)\u5c06\u4f1a\u8f6c\u6362\u5230-1.0\u5230+1.0\u4e4b\u95f4\uff0cUNSIGNED\\_BYTE (0 to 255) \u53d8\u4e3a 0.0 \u5230 +1.0 \u4e4b\u95f4\uff0cSHORT \u4e5f\u662f\u8f6c\u6362\u5230 -1.0 \u5230 +1.0 \u4e4b\u95f4\uff0c\u4f46\u6bd4BYTE\u7cbe\u786e\u5ea6\u9ad8\u3002\n\n*   \u5bf9\u4e8e\u7c7b\u578bgl.BYTE\u548cgl.SHORT\uff0c\u5982\u679c\u662f true \u5219\u5c06\u503c\u5f52\u4e00\u5316\u4e3a \\[-1, 1]\n*   \u5bf9\u4e8e\u7c7b\u578bgl.UNSIGNED\\_BYTE\u548cgl.UNSIGNED\\_SHORT\uff0c\u5982\u679c\u662f true \u5219\u5c06\u503c\u5f52\u4e00\u5316\u4e3a \\[0, 1]\n*   \u5bf9\u4e8e\u7c7b\u578bgl.FLOAT\u548cgl.HALF\\_FLOAT\uff0c\u6b64\u53c2\u6570\u65e0\u6548\n\n\u6700\u5e38\u7528\u7684\u662f\u6807\u51c6\u5316\u989c\u8272\u6570\u636e\uff0c\u5c06\u989c\u8272\u503c\u4ece\\[0, 255]\u8303\u56f4\u7f29\u653e\u5230\\[0, 1]\u8303\u56f4\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u8ba1\u7b97\u5e76\u63d0\u9ad8\u6e32\u67d3\u6027\u80fd\u3002\u7528javascript\u5b9e\u73b0\u5c31\u662f\uff1a\n\n```js\nfunction normalizeColor(color) {\n  return color.map(c => c / 255);\n}\n```\n\n\u5728webgl\u4e2d\uff0c\u989c\u8272\u503c\u8303\u56f4\u4e3a0.0\u5230+1.0\u3002\u4f7f\u75284\u4e2a\u6d6e\u70b9\u578b\u6570\u636e\u5b58\u50a8\u7ea2\uff0c\u7eff\uff0c\u84dd\u548c\u963f\u5c14\u6cd5\u901a\u9053\u6570\u636e\u65f6\uff0c\u6bcf\u4e2a\u9876\u70b9\u7684\u989c\u8272\u5c06\u4f1a\u5360\u752816\u5b57\u8282\u7a7a\u95f4\uff08\u4e00\u4e2agl.FLOAT\u7c7b\u578b\u6570\u636e\u5360\u75284\u4e2a\u5b57\u8282\uff09\uff0c\u5982\u679c\u4f60\u6709\u590d\u6742\u7684\u51e0\u4f55\u4f53\u5c06\u4f1a\u5360\u7528\u5f88\u591a\u5185\u5b58\u3002\u4ee3\u66ff\u7684\u505a\u6cd5\u662f\u5c06\u989c\u8272\u6570\u636e\u8f6c\u6362\u4e3a\u56db\u4e2aUNSIGNED\\_BYTE\uff0c\u5176\u4e2d0\u8868\u793a0.0\uff0c255\u8868\u793a 1.0\u3002\u73b0\u5728\u6bcf\u4e2a\u9876\u70b9\u53ea\u9700\u8981\u56db\u4e2a\u5b57\u8282\u5b58\u50a8\u989c\u8272\u503c\uff0c\u7701\u4e8675% \u7a7a\u95f4\u3002\n\n\u6bd4\u5982\u4e0b\u9762\u4f7f\u7528UNSIGNED\\_BYTE\u4f20\u9001\u989c\u8272\u6570\u636e\uff1a\n\n```js\nimport initShaders from \"./initShaders.js\";\n\n\nconst main = () => {\n  const canvas = document.getElementById('webgl')\n  const gl = canvas.getContext('webgl')\n  const vertexShaderSource1 = `\n    attribute vec3 a_position;\n    attribute vec3 a_color;\n    varying vec3 v_color;\n    void main(){\n        v_color = a_color;\n        gl_PointSize = 10.0;\n        gl_Position = vec4(a_position, 1.0);\n    }\n  `\n  const fragmentShaderSource1 = `\n    precision mediump float;\n    varying vec3 v_color;\n    void main(){\n        gl_FragColor = vec4(v_color, 1.0);\n    }\n  `\n  const program1 = initShaders(gl, vertexShaderSource1, fragmentShaderSource1)\n\n  const positionLocation1 = gl.getAttribLocation(program1, 'a_position')\n  const colorPosition = gl.getAttribLocation(program1, 'a_color')\n\n  let positions = [\n    -0.5, 0.0,\n    0.5, 0.0, \n    0.0, 0.5,\n  ]\n  let colors = [ // \u8fd9\u4e9b\u6570\u636e\u5728\u5b58\u5165\u7f13\u51b2\u65f6\u5c06\u88ab\u622a\u53d6\u6210Uint8Array\u7c7b\u578b\n    255, 0.1, 0.1111,// \u4f1a\u88ab\u622a\u53d6\u6210255,0,0\n    0.222, 255, 0,// \u4f1a\u88ab\u622a\u53d6\u62100,255,0\n    0, 0, 255.888, // \u4f1a\u88ab\u622a\u53d6\u62100, 0, 255\n  ]\n  colors = new Uint8Array(colors)\n  positions = new Float32Array(positions)\n\n\n\n  const FSIZE = positions.BYTES_PER_ELEMENT // 4\n  const ISIZE = colors.BYTES_PER_ELEMENT // 1\n\n  console.log('positions...',FSIZE, positions)\n\n  const positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW)\n\n  const colorBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW)\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.vertexAttribPointer(\n    positionLocation1,\n    2, // size\uff0c\n    gl.FLOAT, // type, buffer\u7684\u6570\u636e\u7c7b\u578b\n    false,\n    2 * FSIZE, // \u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f\u6240\u5360\u7684bytes\n    0\n  );\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer)\n  gl.vertexAttribPointer(\n    colorPosition,\n    3, // size\uff0c\n    gl.UNSIGNED_BYTE,\n    true,// \u9700\u8981\u5f52\u4e00\u5316\n    3 * ISIZE,\n    0\n  );\n\n  // \u544a\u8bc9webgl\uff0c\u5c5e\u6027positionLocation1\u5e94\u8be5\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4eceattributeValues\u4e2d\u8bfb\u53d6\u6570\u636e\n  gl.enableVertexAttribArray(positionLocation1);\n  gl.enableVertexAttribArray(colorPosition);\n\n  gl.clearColor(0, 0, 0, 0)\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  gl.useProgram(program1)\n  // \u544a\u8bc9webgl\u7ed8\u52363\u4e2a\u70b9\n  gl.drawArrays(gl.POINTS, 0, 3)\n\n}\n\nmain();\n\n```\n\n\u6548\u679c\u5982\u4e0b\uff1a\n\n![image](../../easy-webgl/ver_03.webp)\n\n### STRIDE \u548c OFFSET\n\n`stride`\uff1a\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u6307\u5b9a\u8fde\u7eed\u9876\u70b9\u5c5e\u6027\u5f00\u59cb\u4e4b\u95f4\u7684\u504f\u79fb(\u5373\u6570\u7ec4\u4e2d\u4e00\u884c\u957f\u5ea6)\u3002\u4e0d\u80fd\u5927\u4e8e255\u3002\u5982\u679c stride\u4e3a0\uff0c\u5219\u5047\u5b9a\u8be5\u5c5e\u6027\u662f\u7d27\u5bc6\u6253\u5305\u7684\uff0c\u5373\u4e0d`\u4ea4\u9519\u5c5e\u6027`\uff0c\u6bcf\u4e2a\u5c5e\u6027\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u5757\u4e2d\uff0c\u4e0b\u4e00\u4e2a\u9876\u70b9\u7684\u5c5e\u6027\u7d27\u8ddf\u5f53\u524d\u9876\u70b9\u4e4b\u540e\u3002\u5177\u4f53\u53ef\u770b[\u8fd9\u91cc](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/vertexAttribPointer#stride)\n\n`offset`\uff1a\u6307\u5b9a\u9876\u70b9\u5c5e\u6027\u6570\u7ec4\u4e2d\u7b2c\u4e00\u90e8\u5206\u7684\u5b57\u8282\u504f\u79fb\u91cf\u3002\u5fc5\u987b\u662f\u7c7b\u578b\u7684\u5b57\u8282\u957f\u5ea6\u7684\u500d\u6570\u3002\n\n\u5728[webglfundamentals](https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-how-it-works.html)\u4e2d\u63d0\u5230\uff0c\u5982\u679cstride\u548coffset\u4f7f\u7528 0 \u4ee5\u5916\u7684\u503c\u65f6\u4f1a\u590d\u6742\u5f97\u591a\uff0c\u867d\u7136\u8fd9\u6837\u4f1a\u53d6\u5f97\u4e00\u4e9b\u6027\u80fd\u80fd\u4e0a\u7684\u4f18\u52bf\uff0c \u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\u5e76\u4e0d\u503c\u5f97\uff0c\u9664\u975e\u4f60\u60f3\u5145\u5206\u538b\u69a8WebGL\u7684\u6027\u80fd\u3002\n\n\u5177\u4f53\u70b9\uff0cstride\u8868\u793a\u9876\u70b9\u7740\u8272\u5668\u6bcf\u6267\u884c\u4e00\u6b21\uff0c\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u7684\u4e00\u4e2a\u7247\u6bb5\uff0c\u6216\u8005\u8bf4\u9876\u70b9\u7740\u8272\u5668\u6bcf\u6b21\u6267\u884c\uff0c\u90fd\u9700\u8981\u524d\u8fdb\u7684\u5b57\u8282\u6570\u3002\n\n> \u4ea4\u9519\u5c5e\u6027\uff1a\u5373\u4f7f\u7528\u540c\u4e00\u4e2a\u7f13\u51b2\u5b58\u50a8\u4e24\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027\u9700\u8981\u7684\u6570\u636e\n\n\u5047\u8bbe\u6211\u4eec\u6709\u4e0b\u9762\u7684\u9876\u70b9\u7740\u8272\u5668\uff1a\n\n```js\nconst vertexShaderSource1 = `\n    attribute vec3 a_position;\n    attribute vec3 a_color;\n    varying vec3 v_color;\n    void main(){\n        v_color = a_color;\n        gl_PointSize = 10.0;\n        gl_Position = vec4(a_position, 1.0);\n    }\n`\n```\n\n\u6211\u4eec\u4f7f\u7528\u540c\u4e00\u4e2a`positions`\u7f13\u51b2\u5b58\u50a8\u6bcf\u4e2a\u9876\u70b9\u7684\u5750\u6807\u548c\u989c\u8272\u6570\u636e\uff0c\u4e0b\u9762\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u524d\u4e24\u4e2a\u8868\u793a\u9876\u70b9\u7684\u5750\u6807\uff0c\u540e\u9762\u4e09\u4e2a\u8868\u793a\u9876\u70b9\u7684\u989c\u8272\u503c\u3002\n\n```js\n  let positions = [\n    // x y  r g b \u524d\u9762\u4e24\u4e2a\u4ee3\u8868\u5750\u6807\uff0c\u540e\u9762\u4e09\u4e2a\u4ee3\u8868\u989c\u8272rgb\u7684\u503c\n    -0.5, 0.0, 1.0, 0.0, 0.0,\n    0.5, 0.0, 0.0, 1.0, 0.0,\n    0.0, 0.8, 0.0, 0.0, 1.0\n  ]\n  positions = new Float32Array(positions)\n```\n\n\u7136\u540e\u8c03\u7528gl.vertexAttribPointer\u544a\u8bc9webgl\u600e\u4e48\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u6570\u636e\uff1a\n\n```js\n  gl.vertexAttribPointer(\n    positionLocation1,\n    2, // size\uff0c\n    gl.FLOAT, // type, buffer\u7684\u6570\u636e\u7c7b\u578b\n    false,\n    5 * FSIZE, // \u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f\u6240\u5360\u7684bytes\n    0\n  );\n  gl.vertexAttribPointer(\n    colorPosition,\n    3, // size\uff0cattribute\u53d8\u91cf\u7684\u957f\u5ea6(vec3)\n    gl.FLOAT,\n    false,\n    5 * FSIZE,\n    2 * FSIZE\n  );\n```\n\n`positions`\u7f13\u51b2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u5b57\u5360\u75284\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u7528\u6bcf5\u4e2a\u6570\u5b57\u5b58\u50a8\u4e00\u4e2a\u9876\u70b9\u7684\u5750\u6807\u548c\u989c\u8272\u6570\u636e\uff0c\u56e0\u6b64\u4e00\u4e2a\u9876\u70b9\u9700\u8981\u7684\u5750\u6807\u548c\u989c\u8272\u6570\u636e\u5360\u75285 \\* 4 = 20\u4e2a\u5b57\u8282\u3002\u6bd4\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6bcf\u4e00\u884c(4\u4e2a\u5b57\u8282)\u8868\u793a\u4e00\u4e2a\u6570\u5b57\uff0c\u6bd4\u5982`00 00 00 BF`\u8868\u793a0.5\u3002`00 00 00 00`\u8868\u793a0.0\u3002\n\n\u9876\u70b9\u7740\u8272\u5668\u6bcf\u6b21\u8fd0\u884c\u8bfb\u53d6`stride`\uff08\u5373\u4f20\u7ed9gl.vertexAttribPointer\u65b9\u6cd5\u7684stride\u53c2\u6570\u7684\u503c\uff09\u4e2a\u5b57\u8282\u3002\u7136\u540e\u8fd9stride\u4e2a\u5b57\u8282\u4e2d\uff0c\u53c8\u6709\u5750\u6807\u6570\u636e\uff0c\u53c8\u6709\u989c\u8272\u6570\u636e\uff0c\u90a3\u600e\u4e48\u8bfb\u53d6\u6bcf\u4e2a\u5c5e\u6027\u7684\u6570\u636e\uff1f\u8fd9\u5c31\u662foffet\u7684\u4f5c\u7528\n\n![image](../../easy-webgl/ver_04.webp)\n\n![image](../../easy-webgl/ver_05.webp)\n\n\n### \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u4ea4\u9519\u5c5e\u6027\n\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u57fa\u672c\u90fd\u662f\u7528buffer\u4f20\u9012\u7c7b\u578b\u56fa\u5b9a\u7684\u6570\u636e\u7ed9GPU\uff0c\u90a3\u80fd\u4e0d\u80fd\u7528\u540c\u4e00\u4e2abuffer\u4f20\u9012\u5305\u542b\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u5230GPU\uff1f\u672c\u8282\u6211\u4eec\u5c31\u6765\u5b9e\u8df5\u4e00\u4e0b\u3002\n\n\u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u6570\u636e\u7ed3\u6784\u8868\u793a\u4e00\u4e2a\u9876\u70b9\u7684\u6570\u636e\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e00\u9879\u4ee3\u8868\u4e00\u4e2a\u9876\u70b9\uff0c\u6bcf\u4e2a\u9876\u70b9\u5305\u542b\u5750\u6807(position)\u548c\u989c\u8272(color)\u6570\u636e\u3002\u5750\u6807\u4f7f\u7528gl.FLOAT\u5b58\u50a8\uff0c\u9700\u89818\u4e2a\u5b57\u8282\u3002\u989c\u8272\u4f7f\u7528gl.UNSIGNED\\_BYTE\u5b58\u50a8\uff0c\u9700\u89814\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u4e2a\u9876\u70b9\u9700\u898112\u4e2a\u5b57\u8282\n\n```js\n  // position\u9700\u89818\u4e2a\u5b57\u8282\uff0ccolor\u9700\u89814\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u4e2a\u9876\u70b9\u9700\u898112\u4e2a\u5b57\u8282\n  const verticesInfo = [\n    {\n      position: [-0.5, 0.0], // \u9700\u89818\u4e2a\u5b57\u8282\n      color: [255, 0, 0, 255], // \u9700\u89814\u4e2a\u5b57\u8282\n    },\n    {\n      position: [0.5, 0.0],\n      color: [0, 255, 0, 255],\n    },\n    {\n      position: [0.0, 0.8],\n      color: [0, 0, 255, 255]\n    }\n  ]\n```\n\n\u6839\u636e\u4ee5\u4e0a\u6570\u636e\u521b\u5efa\u7f13\u51b2\uff1a\n\n```js\n\n  // position\u9700\u89818\u4e2a\u5b57\u8282\uff0ccolor\u9700\u89814\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u4e2a\u9876\u70b9\u9700\u898112\u4e2a\u5b57\u8282\n  const totalSizePerVertex = 12;\n  const buffer = new ArrayBuffer(totalSizePerVertex * verticesInfo.length)\n  const dv = new DataView(buffer);\n  for (let i = 0; i < verticesInfo.length; i++) {\n    const vertex = verticesInfo[i]\n    dv.setFloat32(totalSizePerVertex * i, vertex.position[0], true)\n    dv.setFloat32(totalSizePerVertex * i + 4, vertex.position[1], true)\n    dv.setUint8(totalSizePerVertex * i + 8, vertex.color[0], true)\n    dv.setUint8(totalSizePerVertex * i + 9, vertex.color[1], true)\n    dv.setUint8(totalSizePerVertex * i + 10, vertex.color[2], true)\n    dv.setUint8(totalSizePerVertex * i + 11, vertex.color[3], true)\n\n  }\n  console.log('buffer...', buffer)\n```\n\n\u7136\u540e\u544a\u8bc9WebGL\u600e\u4e48\u8bfb\u53d6\u7f13\u51b2\uff1a\n\n```js\n  const vertexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.STATIC_DRAW)\n\n  // \u8bbe\u7f6e\u5c5e\u6027positionLocation1\u7684\u4e00\u7cfb\u5217\u72b6\u6001\uff0c\u544a\u8bc9\u5b83\u5e94\u8be5\u600e\u4e48\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u6570\u636e\n  // \u5b9a\u4e49\u70b9\u7684\u4fe1\u606f\n  gl.vertexAttribPointer(\n    positionLocation1,\n    2, \n    gl.FLOAT, \n    false,\n    totalSizePerVertex, \n    0\n  );\n  gl.vertexAttribPointer(\n    colorPosition,\n    4, \n    gl.UNSIGNED_BYTE,\n    true,\n    totalSizePerVertex,\n    2 * Float32Array.BYTES_PER_ELEMENT\n  );\n```\n\n\u7ed8\u5236\u7ed3\u679c\u5982\u4e0b\uff1a\n\n![image](../../easy-webgl/ver_06.webp)\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```js\nimport initShaders from \"./initShaders.js\";\n\n\nconst main = () => {\n  const canvas = document.getElementById('webgl')\n  const gl = canvas.getContext('webgl')\n  const vertexShaderSource1 = `\n    attribute vec3 a_position;\n    attribute vec4 a_color;\n    varying vec4 v_color;\n    void main(){\n        v_color = a_color;\n        gl_PointSize = 10.0;\n        gl_Position = vec4(a_position, 1.0);\n    }\n  `\n  const fragmentShaderSource1 = `\n    precision mediump float;\n    varying vec4 v_color;\n    void main(){\n        gl_FragColor = vec4(v_color);\n    }\n  `\n  const program1 = initShaders(gl, vertexShaderSource1, fragmentShaderSource1)\n\n  const positionLocation1 = gl.getAttribLocation(program1, 'a_position')\n  const colorPosition = gl.getAttribLocation(program1, 'a_color')\n\n  // position\u9700\u89818\u4e2a\u5b57\u8282\uff0ccolor\u9700\u89814\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u4e2a\u9876\u70b9\u9700\u898112\u4e2a\u5b57\u8282\n  const verticesInfo = [\n    {\n      position: [-0.5, 0.0], // \u9700\u89818\u4e2a\u5b57\u8282\n      color: [255, 0, 0, 255], // \u9700\u89814\u4e2a\u5b57\u8282\n    },\n    {\n      position: [0.5, 0.0],\n      color: [0, 255, 0, 255],\n    },\n    {\n      position: [0.0, 0.8],\n      color: [0, 0, 255, 255]\n    }\n  ]\n\n  // position\u9700\u89818\u4e2a\u5b57\u8282\uff0ccolor\u9700\u89814\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u4e2a\u9876\u70b9\u9700\u898112\u4e2a\u5b57\u8282\n  const totalSizePerVertex = 12;\n  const buffer = new ArrayBuffer(totalSizePerVertex * verticesInfo.length)\n  const dv = new DataView(buffer);\n  for (let i = 0; i < verticesInfo.length; i++) {\n    const vertex = verticesInfo[i]\n    dv.setFloat32(totalSizePerVertex * i, vertex.position[0], true)\n    dv.setFloat32(totalSizePerVertex * i + 4, vertex.position[1], true)\n    dv.setUint8(totalSizePerVertex * i + 8, vertex.color[0], true)\n    dv.setUint8(totalSizePerVertex * i + 9, vertex.color[1], true)\n    dv.setUint8(totalSizePerVertex * i + 10, vertex.color[2], true)\n    dv.setUint8(totalSizePerVertex * i + 11, vertex.color[3], true)\n\n  }\n  console.log('buffer...', buffer)\n  const vertexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.STATIC_DRAW)\n\n  // \u8bbe\u7f6e\u5c5e\u6027positionLocation1\u7684\u4e00\u7cfb\u5217\u72b6\u6001\uff0c\u544a\u8bc9\u5b83\u5e94\u8be5\u600e\u4e48\u4ece\u7f13\u51b2\u4e2d\u8bfb\u53d6\u6570\u636e\n  // \u5b9a\u4e49\u70b9\u7684\u4fe1\u606f\n  gl.vertexAttribPointer(\n    positionLocation1,\n    2, \n    gl.FLOAT, \n    false,\n    totalSizePerVertex, \n    0\n  );\n  gl.vertexAttribPointer(\n    colorPosition,\n    4, \n    gl.UNSIGNED_BYTE,\n    true,\n    totalSizePerVertex,\n    2 * Float32Array.BYTES_PER_ELEMENT\n  );\n\n\n  gl.enableVertexAttribArray(positionLocation1);\n  gl.enableVertexAttribArray(colorPosition);\n\n  gl.clearColor(0, 0, 0, 0)\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  gl.useProgram(program1)\n  // \u544a\u8bc9webgl\u7ed8\u52363\u4e2a\u70b9\n  gl.drawArrays(gl.POINTS, 0, 3)\n\n}\n\nmain();\n```\n\n#### \u4ea4\u9519\u5c5e\u6027\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u70b9\n\n\u56de\u987e\u4e00\u4e0b\uff0c\u4f20\u9012\u7ed9vertexAttribPointer\u7684stride\u53c2\u6570\u7684\u503c\u5fc5\u987b\u662f\u4f20\u9012\u7684\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u7684\u6574\u6570\u500d\u3002\n\u6bd4\u5982\u4f20\u9012\u7ed9vertexAttribPointer\u7684type\u662fgl.FLOAT\uff0c\u90a3\u4e48stride\u5fc5\u987b\u662f4\u7684\u6574\u6570\u500d\n\n```js\nvertexAttribPointer(index, size, type, normalized, stride, offset)\n```\n\n\u8fd9\u5728\u4f7f\u7528\u7f13\u51b2\u5b58\u50a8\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u4ea4\u9519\u5c5e\u6027\u65f6\u5c24\u5176\u9700\u8981\u6ce8\u610f\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u6570\u636e\uff1a\n\n```js\n  // position\u9700\u89818\u4e2a\u5b57\u8282\uff0ccolor\u9700\u89813\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u4e2a\u9876\u70b9\u9700\u898111\u4e2a\u5b57\u8282\n  const verticesInfo = [\n    {\n      position: [-0.5, 0.0], // \u9700\u89818\u4e2a\u5b57\u8282\n      color: [255, 0, 0], // \u9700\u89813\u4e2a\u5b57\u8282\n    },\n    {\n      position: [0.5, 0.0],\n      color: [0, 255, 0],\n    },\n    {\n      position: [0.0, 0.8],\n      color: [0, 0, 255]\n    }\n  ]\n```\n\n\u8fd9\u91cc\u4e00\u4e2a\u9876\u70b9\u9700\u898111\u4e2a\u5b57\u8282\uff0c\u5f53\u6211\u4eec\u8c03\u7528vertexAttribPointer\u7ed9position\u5c5e\u6027\u6307\u5b9a\u5982\u4f55\u8bfb\u53d6\u7f13\u51b2\u65f6\uff1a\n\n```js\n  gl.vertexAttribPointer(\n    positionLocation1,\n    2, \n    gl.FLOAT, \n    false,\n    totalSizePerVertex, \n    0\n  );\n```\n\n\u7531\u4e8etype\u662fgl.FLOAT\uff0c\u53734\u4e2a\u5b57\u8282\uff0c\u4f46\u662fstride\u5e76\u4e0d\u662f4\u7684\u500d\u6570\uff0c\u6b64\u65f6\u662f\u4f1a\u62a5\u9519\u7684\uff0c\u5982\u4e0b\u9762\u6240\u793a\uff1a\n\n![image](../../easy-webgl/ver_07.webp)\n\n\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u9a8c\u8bc1\uff1a\n\n```js\nimport initShaders from \"./initShaders.js\";\n\n\nconst main = () => {\n  const canvas = document.getElementById('webgl')\n  const gl = canvas.getContext('webgl')\n  const vertexShaderSource1 = `\n    attribute vec3 a_position;\n    attribute vec3 a_color;\n    varying vec3 v_color;\n    void main(){\n        v_color = a_color;\n        gl_PointSize = 10.0;\n        gl_Position = vec4(a_position, 1.0);\n    }\n  `\n  const fragmentShaderSource1 = `\n    precision mediump float;\n    varying vec3 v_color;\n    void main(){\n        gl_FragColor = vec4(v_color, 1.0);\n    }\n  `\n  const program1 = initShaders(gl, vertexShaderSource1, fragmentShaderSource1)\n\n  const positionLocation1 = gl.getAttribLocation(program1, 'a_position')\n  const colorPosition = gl.getAttribLocation(program1, 'a_color')\n\n  // position\u9700\u89818\u4e2a\u5b57\u8282\uff0ccolor\u9700\u89813\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u4e2a\u9876\u70b9\u9700\u898111\u4e2a\u5b57\u8282\n  const verticesInfo = [\n    {\n      position: [-0.5, 0.0], // \u9700\u89818\u4e2a\u5b57\u8282\n      color: [255, 0, 0], // \u9700\u89813\u4e2a\u5b57\u8282\n    },\n    {\n      position: [0.5, 0.0],\n      color: [0, 255, 0],\n    },\n    {\n      position: [0.0, 0.8],\n      color: [0, 0, 255]\n    }\n  ]\n\n  // position\u9700\u89818\u4e2a\u5b57\u8282\uff0ccolor\u9700\u89813\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e00\u4e2a\u9876\u70b9\u9700\u898111\u4e2a\u5b57\u8282\n  const totalSizePerVertex = 11;\n  const buffer = new ArrayBuffer(totalSizePerVertex * verticesInfo.length)\n  const dv = new DataView(buffer);\n  for (let i = 0; i < verticesInfo.length; i++) {\n    const vertex = verticesInfo[i]\n    dv.setFloat32(totalSizePerVertex * i, vertex.position[0], true)\n    dv.setFloat32(totalSizePerVertex * i + 4, vertex.position[1], true)\n    dv.setUint8(totalSizePerVertex * i + 8, vertex.color[0], true)\n    dv.setUint8(totalSizePerVertex * i + 9, vertex.color[1], true)\n    dv.setUint8(totalSizePerVertex * i + 10, vertex.color[2], true)\n\n  }\n  console.log('buffer...', buffer)\n  const vertexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)\n  gl.bufferData(gl.ARRAY_BUFFER, buffer, gl.STATIC_DRAW)\n\n\n  gl.vertexAttribPointer(\n    positionLocation1,\n    2, \n    gl.FLOAT, \n    false,\n    totalSizePerVertex, \n    0\n  );\n  gl.vertexAttribPointer(\n    colorPosition,\n    3, \n    gl.UNSIGNED_BYTE,\n    true,\n    totalSizePerVertex,\n    2 * Float32Array.BYTES_PER_ELEMENT\n  );\n\n\n  gl.enableVertexAttribArray(positionLocation1);\n  gl.enableVertexAttribArray(colorPosition);\n\n  gl.clearColor(0, 0, 0, 0)\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  gl.useProgram(program1)\n  // \u544a\u8bc9webgl\u7ed8\u52363\u4e2a\u70b9\n  gl.drawArrays(gl.POINTS, 0, 3)\n\n}\n\nmain();\n```\n\n## \u53c2\u8003\n\n*   [MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/vertexAttribPointer#stride)\n*   [webglfundamentals](https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-how-it-works.html)\n"})}}}]);
//# sourceMappingURL=A002.2350626a.chunk.js.map